@page "/wasm/servers"

@rendermode InteractiveWebAssembly

@inject NavigationManager NavigationManager
@inject IServersRepository ServersApiRepository

<h3>Servers</h3>
<br />
<br />
@if (listServers.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    City
                </th>
                <th>
                    Status
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (listServers.Any())
            {
                foreach (var server in listServers)
                {
                    @if (server is not null)
                    {
                        <tr>
                            <td>@server.Name</td>
                            <td>@server.City</td>
                            <td>@(server.IsOnline ? "Online" : "Offline")</td>
                            <td><a class="btn btn-link" href="/wasm/servers/@server.Id">Edit</a></td>
                            <td><button class="btn btn-link" @onclick="@(async ()=> { await DeleteAsync(server.Id); })">Delete</button></td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <br />
    <a class="btn btn-primary" href="/wasm/servers/add">Add Server</a>
}

@code {
    public List<Server> listServers { get; set; } = new List<Server>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            listServers = await ServersApiRepository.GetServersAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteAsync(int serverId)
    {
        ServersRepository.DeleteServer(serverId);
        listServers = await ServersApiRepository.GetServersAsync();
    }
}
