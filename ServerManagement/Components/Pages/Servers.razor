@page "/servers"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer // set rendermode here to set this component and all child components *@

<div class="d-flex justify-content-between">
    <h3>Servers</h3>

    <a href="/servers/add" class="btn btn-link">
        Add
    </a>
</div>
<br />
<br />

<div class="container-fluid text-center">
    <div class="row w-100">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.InvariantCultureIgnoreCase) ? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")"
                         class="card-img-top"
                         alt="..." s
                         tyle="height:120px;">
                    <div class="card-body">
                        <button type="button"
                                class="btn btn-primary me-1"
                                @onclick="() => OnSelectCity(city)">
                            @city
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<br />

<div class="input-group mb-3">
    <input class="form-control"
           type="text"
           placeholder="Search Servers"
           @bind-value="serverFilter"
           @bind-value:event="oninput" />@* change the default onChangee to onInput on the two way binding *@
    <button class="btn btn-outline-secondary"
            type="button"
            id="button-search"
            @onclick="HandleSearch">
        Search
    </button>
</div>

<br />

@* to set rendermode per component *@
@* this method is recommended *@
<ServerListComponent @rendermode="InteractiveServer" CityName="@selectedCity"></ServerListComponent>

@code {
    private List<string> cities = CitiesRepository.GetCities();
    private string selectedCity = "Toronto";

    private string _serverFilter = "";
    private string serverFilter
    {
        get => _serverFilter;
        set
        {
            _serverFilter = value;
            //servers = ServersRepository.SearchServers(_serverFilter);
        }
    }

    private void OnSelectCity(string cityName)
    {
        selectedCity = cityName;
    }


    // when using @onchange blazor passes some parameters into the function called ChangeEventArgs
    // private void HandleServerFilterChnage(ChangeEventArgs args)
    // {
    //     serverFilter = args.Value?.ToString() ?? String.Empty;
    // }

    private void HandleSearch()
    {
        //servers = ServersRepository.SearchServers(serverFilter);
        selectedCity = String.Empty;
    }
}
