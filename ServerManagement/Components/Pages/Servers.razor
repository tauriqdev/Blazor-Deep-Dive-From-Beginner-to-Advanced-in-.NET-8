@page "/servers"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer // set rendermode here to set this component and all child components *@

<div class="d-flex justify-content-between">
    <h3>Servers</h3>

    <a href="/servers/add" class="btn btn-link">Add</a>
</div>
<br />
<br />

<div class="container-fluid text-center">
    <div class="row w-100">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.InvariantCultureIgnoreCase) ? "border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="..." style="height:120px;">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary me-1" @onclick="() => OnSelectCity(city)">
                            @city
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<br />

<div class="input-group mb-3">
    <input class="form-control" type="text" placeholder="Search Servers" @onchange="HandleServerFilterChnage" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

@* to set rendermode per component *@
@* this method is recommended *@
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent> *@

<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color: @(server.IsOnline ? "green" : "red")">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            <EditForm Model="server" FormName="@($"form-server-{server.ServerId}")" OnValidSubmit="@(() => { OnDeleteServer(server.ServerId); })">
                <button type="submit" class="btn btn-primary ms-1">
                    Delete
                </button>
            </EditForm>
        </li>
    }
</ul>

@code {
    private List<string> cities = CitiesRepository.GetCities();
    // private List<Server> servers = new() { };
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
    private string selectedCity = "Toronto";
    private string serverFilter = "";

    private void OnSelectCity(string cityName)
    {
        selectedCity = cityName;
        servers = ServersRepository.GetServersByCity(selectedCity);
    }

    private void OnDeleteServer(int id)
    {
        if (id > 0)
        {
            ServersRepository.DeleteServer(id);
            NavigationManager.Refresh();
        }
    }

    // when using @onchange blazor passes some parameters into the function called ChangeEventArgs
    private void HandleServerFilterChnage(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? String.Empty;
    }

    private void HandleSearch()
    {
        servers = ServersRepository.SearchServers(serverFilter);
        selectedCity = String.Empty;
    }
}
