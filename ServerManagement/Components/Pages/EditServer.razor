@page "/servers/{id:int}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IServersEFCoreRepository ServersEFCoreRepository

@* to stop the user from leaving the page accedentally *@
@* router has to be interactive *@
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" ConfirmExternalNavigation="true"></NavigationLock>

<h3>Edit Server</h3>

<br />
<br />

@if (server != null)
{
    <EditForm Model="server"
              FormName="formServer"
              OnValidSubmit="OnSubmit">
        @* tells the form to use the data annotations on the model for validation*@
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @* display the validation message *@
        <ValidationSummary></ValidationSummary>

        <InputNumber @bind-Value="server.Id" hidden></InputNumber>

        <FieldComponent Label="Name">
            <Control>
                <InputText class="form-control" @bind-Value="server.Name"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText class="form-control" @bind-Value="server.City"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="IsOnline">
            <Control>
                <InputCheckbox class="form-check-input" @bind-Value="server.IsOnline"></InputCheckbox>
            </Control>
        </FieldComponent>

        <br />

        <button class="btn btn-primary me-1" type="submit">
            Update
        </button>
        <a href="/servers" class="btn btn-primary">
            Close
        </a>
    </EditForm>
}

<br />

@code {
    [Parameter]
    public int Id { get; set; }

    // two way model binding
    [SupplyParameterFromForm(FormName = "formServer")]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        // fetch only if server is null
        server ??= ServersEFCoreRepository.GetServerById(Id);
    }

    private void OnSubmit()
    {
        if (server != null)
        {
            ServersEFCoreRepository.UpdateServer(server.Id, server);
            NavigationManager.NavigateTo($"/servers/back_from/{server.City}");
        }
    }

    // the router(global) needs to be set as interactive
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        // prompt the user if the user is sure to navigate away
        var isConfirmmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");
        if (!isConfirmmed)
        {
            context.PreventNavigation();
        }
    }
}
