@implements IDisposable

@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore

<div class="col">
    <div class="card @(SelectedCity.Equals(City, StringComparison.InvariantCultureIgnoreCase) ? "border-primary" : "")">
        <img src="@($"/images/{City}.png")"
             class="card-img-top"
             alt="..." s
             tyle="height:120px;">
        <div class="card-body">
            <button type="button"
                    class="btn btn-primary me-1"
                    @onclick="() => SelectCityClick(City)">
                @City
            </button>
        </div>
        <div>
            @switch (City)
            {
                case "Toronto":
                <span>
                    @_numberServersOnlineToronto
                </span>
                break;

                case "Montreal":
                <span>
                    @_numberServersOnlineMontreal
                </span>
                break;

                default:
                break;
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SelectedCity { get; set; } = "Toronto";

    [Parameter]
    public string City { get; set; } = "";

    [Parameter]
    public EventCallback<string> SelectedCityCallback { get; set; }

    private int _numberServersOnlineToronto;
    private int _numberServersOnlineMontreal;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            switch (City)
            {
                case "Toronto":
                _numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
                TorontoOnlineServersStore.AddStateChangeListeners(OnTorontoServersStatusChange);
                break;

                case "Montreal":
                _numberServersOnlineMontreal = MontrealOnlineServersStore.GetNumberServersOnline();
                MontrealOnlineServersStore.AddStateChangeListeners(OnMontrealServersStatusChange);
                break;

                default:
                break;
            }

            StateHasChanged();
        }
    }

    private void OnTorontoServersStatusChange()
    {
        _numberServersOnlineToronto = TorontoOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void OnMontrealServersStatusChange()
    {
        _numberServersOnlineMontreal = MontrealOnlineServersStore.GetNumberServersOnline();
        StateHasChanged();
    }

    private void SelectCityClick(string cityName)
    {
        SelectedCityCallback.InvokeAsync(cityName);
    }

    public void Dispose()
    {
        switch (City)
        {
            case "Toronto":
            TorontoOnlineServersStore.RemoveStateChangeListeners(OnTorontoServersStatusChange);
            break;

            case "Montreal":
            MontrealOnlineServersStore.RemoveStateChangeListeners(OnMontrealServersStatusChange);
            break;

            default:
            break;
        }
    }
}
