@inject IServersEFCoreRepository ServersEFCoreRepository

@* @if (servers != null && servers.Count > 0)
{
    <ul class="list-unstyled"> *@
@* should use Virtualize instead of foreach if: *@
@* - list is big (over 1000 items) *@
@* - the items are the same height *@
@* the items are rendered only when they appear on the screen *@
@*   <Virtualize Items="servers" Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Virtualize>
    </ul>
} *@

@* <ul class="list-unstyled">
    <RepeaterComponent Items="servers">
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>
    </RepeaterComponent>
</ul> *@

<table class="table table-striped">
    <RepeaterComponent Items="servers">
        <Header>
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    City
                </th>
                <th>
                    Status
                </th>
                <th>
                    People Online
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        </Header>
        <Row Context="server">
            <ServerComponent Server="server"></ServerComponent>
        </Row>
    </RepeaterComponent>
</table>

<br />
<button type="button"
        class="btn btn-primary"
        @onclick="() => {}">
    Refresh
</button>

@code {
    [Parameter]
    public string? CityName { get; set; }

    [Parameter]
    public string? SearchFilter { get; set; }

    [Parameter]
    public string? AnotherParam { get; set; }

    private List<Server>? servers;

    private System.Threading.Timer? Timer;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        // if AnotherParam changes
        // only setting paramters if the CityName or SearchFilter has changed
        // then OnParametersSet() will run
        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != CityName)
            {
                base.SetParametersAsync(parameters);
            }
        }

        if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter))
        {
            if (searchFilter != SearchFilter)
            {
                base.SetParametersAsync(parameters);
            }
        }

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet");
        if (string.IsNullOrWhiteSpace(SearchFilter))
            servers = ServersEFCoreRepository.GetServersByCity(CityName ?? "Toronto");
        else
            servers = ServersEFCoreRepository.SearchServers(SearchFilter);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return base.ShouldRender();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            // add init code here
            if (string.IsNullOrWhiteSpace(SearchFilter))
                servers = ServersEFCoreRepository.GetServersByCity(CityName ?? "Toronto");
            else
                servers = ServersEFCoreRepository.SearchServers(SearchFilter);

            // add this to rerender the view bc this runs after the view is rendered
            // forces the component to render again
            StateHasChanged();

            Timer = new System.Threading.Timer(_ =>
            {
                // forces the logic to run on the same sync context
                // if not youll get errors
                // only error for server interactivity, logic must run on signal r channel
                base.InvokeAsync(StateHasChanged);
            }, null, 2000, 2000);
        }
    }
}
