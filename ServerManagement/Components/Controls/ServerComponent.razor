@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject IServersEFCoreRepository ServersEFCoreRepository

@if (Server != null)
{
    @* Use @key to improve list - rendering performance *@
    @* only renders the single item when adding or removing it, not the whole list *@
    @* <li @key="Server.Id" style="background-color: @GetBackgroundColour()">
        @Server.Name in @Server.City is
        <span style="color: @(Server.IsOnline ? "green" : "red")">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        &nbsp;

        @if (Server.IsOnline)
        {
            <button type="button"
                    class="btn btn-outline-danger"
                    @onclick="() => Server.IsOnline = false">
                Turn Off
            </button>
        }
        else
        {
            <button type="button"
                    class="btn btn-outline-success"
                    @onclick="() => Server.IsOnline = true">
                Turn On
            </button>
        }

        &nbsp;

        @if (Server.IsOnline)
        {
            Random random = new Random();
            int randomNumber = random.Next(0, 500);

            <span>@randomNumber</span>
        }
        else
        {
            <span>N/A</span>
        }

        &nbsp;
        <a href="/servers/@Server.Id" class="btn btn-link">Edit</a> *@
    @* @onclick="() => editingServer = !editingServer"> *@
    @*  <EditForm Model="Server"
                  FormName="@($"form-server-{Server.Id}")"
                  OnValidSubmit="@(() => { OnDeleteServer(Server.Id); })">
            <button type="submit" class="btn btn-primary ms-1">
                Delete
            </button>
        </EditForm> *@

    @* @if (editingServer)
    {
    <ServerManagement.Components.Pages.EditServer Id="Server.Id"></ServerManagement.Components.Pages.EditServer>
    } *@
    @* </li> *@

    <tr style="background-color: @GetBackgroundColour()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color: @(Server.IsOnline ? "green" : "red")">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);

                <span>@randomNumber</span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="() => SetServerStatus(false)">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button"
                        class="btn btn-outline-success"
                        @onclick="() => SetServerStatus(true)">
                    Turn On
                </button>
            }

            &nbsp;
            <a href="/server/@Server.Id" class="btn btn-link">Edit</a>
        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-server-{Server.Id}")"
                      OnValidSubmit="@(() => { OnDeleteServer(Server.Id); })">
                <button type="submit" class="btn btn-primary ms-1">
                    Delete
                </button>
            </EditForm>
        </td>
    </tr>
}

@code {
    [Parameter]
    public Server? Server { get; set; }

    // private bool editingServer = false;

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    private void OnDeleteServer(int id)
    {
        if (id > 0)
        {
            ServersEFCoreRepository.DeleteServer(id);
            NavigationManager.Refresh(true);
        }
    }

    private string GetBackgroundColour()
    {
        if (SelectedCity == null)
        {
            return "white";
        }

        switch (SelectedCity)
        {
            case "Toronto":
            return "powderblue";

            case "Montreal":
            return "lightgray";

            case "Ottawa":
            return "palegreen";

            case "Calgary":
            return "pink";

            case "Halifax":
            return "white";

            default:
            return "white";
        }
    }

    private void SetServerStatus(bool status)
    {
        if (Server == null)
            return;

        if (Server.IsOnline == status)
            return;

        if (Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
        {
            UpdateTorontoServerCount(status);
        }
        else if (Server.City.Equals("Montreal", StringComparison.OrdinalIgnoreCase))
        {
            UpdateMontrealServerCount(status);
        }

        Server.IsOnline = status;
        ServersRepository.UpdateServer(Server.Id, Server);
    }

    private void UpdateTorontoServerCount(bool status)
    {
        var num = TorontoOnlineServersStore.GetNumberServersOnline();

        if (status)
        {
            TorontoOnlineServersStore.SetNumberServersOnline(num + 1);
        }
        else if (num >= 1)
        {
            TorontoOnlineServersStore.SetNumberServersOnline(num - 1);
        }
    }

    private void UpdateMontrealServerCount(bool status)
    {
        var num = MontrealOnlineServersStore.GetNumberServersOnline();

        if (status)
        {
            MontrealOnlineServersStore.SetNumberServersOnline(num + 1);
        }
        else if (num >= 1)
        {
            MontrealOnlineServersStore.SetNumberServersOnline(num - 1);
        }
    }
}
